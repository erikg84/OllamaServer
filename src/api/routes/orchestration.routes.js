/**
 * @file orchestration.routes.js
 * @description Routes definition for the multi-agent orchestration system (MAESTRO).
 * Defines all API endpoints related to agent orchestration, session management,
 * and system capabilities.
 *
 * @module routes/orchestration
 * @requires express
 * @requires controllers/orchestration
 * @requires middleware/request-id.middleware
 * @requires middleware/logging.middleware
 * @requires middleware/error.middleware
 */

const express = require('express');
const router = express.Router();
const orchestrationController = require('../controllers/orchestration.controller');
const requestIdMiddleware = require('../middleware/request-id.middleware');
const loggingMiddleware = require('../middleware/logging.middleware');
const errorMiddleware = require('../middleware/error.middleware');

// Apply common middleware
router.use(requestIdMiddleware);
router.use(loggingMiddleware);

/**
 * @route POST /api/orchestrate
 * @description Initiates an orchestrated response using the MAESTRO system
 * @access Public
 *
 * @param {Object} req.body.query - The user query or input to be processed
 * @param {Object} req.body.options - Optional configuration for the orchestration
 *
 * @returns {Object} JSON response with orchestrated result
 * @returns {String} result.content - The final content generated by the system
 * @returns {Object} result.metadata - Additional metadata about the orchestration process
 * @returns {Number} processingTime - Total processing time in milliseconds
 *
 * @example
 * // Request
 * POST /api/orchestrate
 * {
 *   "query": "Explain quantum computing for beginners",
 *   "options": {
 *     "depth": "detailed",
 *     "preferredAgents": ["research", "creative"],
 *     "maxTokens": 1000
 *   }
 * }
 *
 * // Response
 * {
 *   "status": "success",
 *   "result": {
 *     "content": "Quantum computing is...",
 *     "metadata": {
 *       "sessionId": "550e8400-e29b-41d4-a716-446655440000",
 *       "processingTime": 1200,
 *       "workflowPattern": "collaborative-exploration",
 *       "agentsInvolved": ["research", "creative", "reasoning"],
 *       "qualityScore": 0.92,
 *       "confidence": 0.95
 *     }
 *   },
 *   "processingTime": 1250
 * }
 */
router.post('/', orchestrationController.orchestrate);

/**
 * @route GET /api/orchestrate/session/:sessionId
 * @description Retrieves details of a specific orchestration session
 * @access Public
 *
 * @param {String} req.params.sessionId - The unique session identifier
 *
 * @returns {Object} JSON response with session data
 * @returns {Object} sessionData - Detailed information about the session
 *
 * @example
 * // Request
 * GET /api/orchestrate/session/550e8400-e29b-41d4-a716-446655440000
 *
 * // Response
 * {
 *   "status": "success",
 *   "sessionData": {
 *     "query": "Explain quantum computing for beginners",
 *     "options": { ... },
 *     "startTime": "2023-04-01T12:00:00.000Z",
 *     "endTime": "2023-04-01T12:00:02.500Z",
 *     "workflow": { ... },
 *     "results": { ... }
 *   }
 * }
 */
router.get('/session/:sessionId', orchestrationController.getSessionDetails);

/**
 * @route GET /api/orchestrate/session/:sessionId/communication
 * @description Retrieves logs of agent communication for a specific session
 * @access Public
 *
 * @param {String} req.params.sessionId - The unique session identifier
 *
 * @returns {Object} JSON response with communication logs
 * @returns {Array} communicationLogs - Array of agent messages
 *
 * @example
 * // Request
 * GET /api/orchestrate/session/550e8400-e29b-41d4-a716-446655440000/communication
 *
 * // Response
 * {
 *   "status": "success",
 *   "communicationLogs": [
 *     {
 *       "messageId": "a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6",
 *       "sessionId": "550e8400-e29b-41d4-a716-446655440000",
 *       "senderId": "coordinator",
 *       "recipientId": "research",
 *       "messageType": "task",
 *       "content": "Research the basics of quantum computing",
 *       "timestamp": "2023-04-01T12:00:00.100Z"
 *     },
 *     {
 *       "messageId": "b2c3d4e5-f6g7-h8i9-j0k1-l2m3n4o5p6q7",
 *       "sessionId": "550e8400-e29b-41d4-a716-446655440000",
 *       "senderId": "research",
 *       "recipientId": "coordinator",
 *       "messageType": "observation",
 *       "content": "Quantum computing uses quantum mechanics principles...",
 *       "timestamp": "2023-04-01T12:00:00.500Z"
 *     }
 *   ]
 * }
 */
router.get('/session/:sessionId/communication', orchestrationController.getSessionCommunicationLogs);

/**
 * @route POST /api/orchestrate/session/:sessionId/debug
 * @description Enables or disables debug mode for a specific session
 * @access Public
 *
 * @param {String} req.params.sessionId - The unique session identifier
 * @param {Boolean} req.body.enabled - Whether debug mode should be enabled
 *
 * @returns {Object} JSON response with debug mode status
 *
 * @example
 * // Request
 * POST /api/orchestrate/session/550e8400-e29b-41d4-a716-446655440000/debug
 * {
 *   "enabled": true
 * }
 *
 * // Response
 * {
 *   "status": "success",
 *   "sessionId": "550e8400-e29b-41d4-a716-446655440000",
 *   "debugModeEnabled": true
 * }
 */
router.post('/session/:sessionId/debug', orchestrationController.setSessionDebugMode);

/**
 * @route GET /api/orchestrate/capabilities
 * @description Gets the configuration and capabilities of the MAESTRO system
 * @access Public
 *
 * @returns {Object} JSON response with system capabilities
 * @returns {Array} capabilities.agents - Available agent types
 * @returns {Array} capabilities.workflowPatterns - Supported workflow patterns
 * @returns {Number} capabilities.maxSubtasks - Maximum number of subtasks
 * @returns {Array} capabilities.supportedModels - Available LLM models
 *
 * @example
 * // Request
 * GET /api/orchestrate/capabilities
 *
 * // Response
 * {
 *   "status": "success",
 *   "capabilities": {
 *     "agents": [
 *       {
 *         "id": "coordinator",
 *         "name": "Coordinator Agent",
 *         "description": "Orchestrates the overall process",
 *         "capabilities": ["task-assignment", "synthesis", "workflow-selection"]
 *       },
 *       // ... other agents
 *     ],
 *     "workflowPatterns": [
 *       {
 *         "id": "sequential-chain",
 *         "name": "Sequential Chain",
 *         "description": "Each agent builds on the previous agent's work"
 *       },
 *       // ... other patterns
 *     ],
 *     "maxSubtasks": 10,
 *     "supportedModels": [
 *       {
 *         "id": "llama-3-70b",
 *         "name": "Llama 3 70B",
 *         "quantization": "Q4_K_M"
 *       },
 *       // ... other models
 *     ],
 *     "version": "1.0.0"
 *   }
 * }
 */
router.get('/capabilities', orchestrationController.getSystemCapabilities);

/**
 * @route POST /api/orchestrate/agent/:agentId/message
 * @description Sends a direct message to a specific agent (for testing/debugging)
 * @access Public
 *
 * @param {String} req.params.agentId - The agent identifier
 * @param {String} req.body.message - The message content to send to the agent
 * @param {Object} req.body.options - Optional configuration for the agent
 *
 * @returns {Object} JSON response with agent's response
 *
 * @example
 * // Request
 * POST /api/orchestrate/agent/research/message
 * {
 *   "message": "What are the latest advancements in quantum computing?",
 *   "options": {
 *     "detailLevel": "high",
 *     "citationRequired": true
 *   }
 * }
 *
 * // Response
 * {
 *   "status": "success",
 *   "agentId": "research",
 *   "response": {
 *     "content": "Recent advancements in quantum computing include...",
 *     "confidence": 0.92,
 *     "citations": [
 *       {
 *         "source": "Nature Physics, 2023",
 *         "url": "https://nature.com/articles/..."
 *       }
 *     ],
 *     "processingTime": 1500
 *   }
 * }
 */
router.post('/agent/:agentId/message', orchestrationController.sendDirectAgentMessage);

/**
 * @route GET /api/orchestrate/status
 * @description Gets the current status and metrics of the orchestration system
 * @access Public
 *
 * @returns {Object} JSON response with system status
 *
 * @example
 * // Request
 * GET /api/orchestrate/status
 *
 * // Response
 * {
 *   "status": "success",
 *   "orchestrationStatus": {
 *     "activeSessions": 3,
 *     "agents": {
 *       "coordinator": {
 *         "active": true,
 *         "load": 0.45,
 *         "requestsProcessed": 128,
 *         "averageResponseTime": 250
 *       },
 *       // ... other agents
 *     },
 *     "queue": {
 *       "size": 2,
 *       "pending": 1,
 *       "isPaused": false
 *     },
 *     "workflow": {
 *       "activeWorkflows": 3,
 *       "completedWorkflows": 245,
 *       "averageCompletionTime": 1800
 *     },
 *     "timestamp": "2023-04-01T12:00:00.000Z"
 *   }
 * }
 */
router.get('/status', orchestrationController.getOrchestrationStatus);

// Apply error handling middleware
router.use(errorMiddleware);

module.exports = router;